This is the GUI interface for the CAEN DT5740D / DT5730B digitizers. It is developed for the SBC collaboration.

# Save format
Here is the fields and their corresponding dimensions of the binary data that are being saved. The data can be read by the DataHandling/ReadBinary.py script in the SBC-Analysis repository.
First here are the dimension definitions:
- n_triggers: number of triggers accepted by the digitizer
- n_channels: number of channels enabled for acquisition
- record_length: the number of samples digitized in a given trigger for a channel

These are the fields of saved data and their corresponding dimensions. Fields with n_triggers* mean the value is constant for all triggers. Fields with n_channels* mean the value is common within a group.
- sample_rate (n_triggers*): ADC clock frequency for the digitizer. For DT5740D it is 62.5MHz. Actual triggering clock is at the same frequency as the sampling clock.
- en_chs (n_triggers*, n_channels): A list of the channels enabled for acquisition. This is the name of the channels for which the data are saved. Only channels in enabled groups will be saved.
- trg_mask (n_triggers*): This is a 32bit mask of all of the channels enabled for generating self-triggers. The least significant bit corresponds to channel 0, and so forth. If a bit is set to 1, then the channel participates in self-triggering. If 0, then it does not. Only channels in enabled groups are saved. It is possible that channels enabled for acquisition and for triggering are different. 
- thresholds (n_triggers*, n_channels*): A 12-bit value representing the threshold for self-triggering. The unit is in LSB, where 1LSB = InputDynamicRange/2^12bit and the input dynamic range is 2V for DT5740D. The value is common within each group. 
- dc_offsets (n_triggers*, n_channels*): A 16-bit value in 16-bit DAC LSB unit. The 0-64k range in DAC corresponds to the ADC range, as DAC is slightly larger than ADC. This value is common within a group.
- dc_corrections (n_triggers*, n_channels): A 8-bit correction to each channel in addition to the offset above. The value is in 12-bit LSB, which is roughly the same as the threshold. Since thresholds cannot be changed individually for each channel, change this setting to make sure each channel has the same trigger efficiency.
- dc_range (n_triggers*, n_channels*): Input dynamic range. Equals to 2V for DT5740D.
- trg_source (n_triggers): Indicates the trigger source causing the event acquisiton:
	- Bit[10] = Software Trigger
	- Bit[9] = External Trigger
	- Bits[3:0] = Trigger requests from the groups.
- time_stamp (n_triggers): Time stamps for each trigger generated by the CAEN digitizer. This value is reset at start of acquisition, and increments every 1/2 ADC clock cycle (125MHz for DT5740D). It is a 32bit number, with the lower 31 bits being the time counter, and the 32nd bit is the roll-over flag.
- sipm_traces (n_triggers, n_channels, record_length): Waveforms digitized at 62.5MHz. Each waveform has the same record length, and only data from channels enabled for acquisition are saved.


# Compiling
If compiling this for windows make sure you have downloaded and installed:

* MSYS2 (with CMAKE, build-essentials, clang-tools-extra PREFERRED). See below for further instructions
* (optional) Git for windows (to git clone the dependencies if not included)
* VULKAN-SDK (if using the vulkan backend)

These are all the dependencies so far:

* gl3w				- https://github.com/skaslev/gl3w
* glfw				- https://github.com/glfw/glfw
* imgui				- https://github.com/ocornut/imgui
* implot			- https://github.com/epezent/implot
* json				- https://github.com/nlohmann/json
* serial 			- https://github.com/wjwwood/serial
* spglog 			- https://github.com/gabime/spdlog
* readerwriterqueue - https://github.com/cameron314/readerwriterqueue
* concurrentqueue 	- https://github.com/cameron314/concurrentqueue
* tomlcplusplus 	- https://github.com/marzer/tomlplusplus

The compilation steps are:

mkdir build
cd build
cmake ../ -G "MinGW Makefiles" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
mingw32-make -j8

You will need to install mingw64 using MSYS2 first and install the toolchain and extras (for clang-tidy and clangd)

To install MSYS2 follow:

	https://www.msys2.org/

Then install cmake using msys2:

	https://www.msys2.org/docs/cmake/
	or
	pacman -S mingw-w64-x86_64-cmake
	into a MSYS terminal

If the intention is to develop the code:
After installing MSYS2, you will need clang-tidy and clangd follow. For that, follow:

	https://packages.msys2.org/package/mingw-w64-x86_64-clang-tools-extra

Then, follow this link to install LSP:
	https://chromium.googlesource.com/chromium/src/+/refs/heads/main/docs/sublime_ide.md#Setup
